; partial-tree takes as arguments an integer n and list of at least n elements
; and constructs a balanced tree containing the first n elements of the list.
(define (make-tree entry left right)
  (list entry left right))

(define (partial-tree elts n)
  (if (= n 0)
    (cons `() elts)
    (let ((left-size (quotient (- n 1) 2)))
      (let ((left-result (partial-tree elts left-size)))
        (let ((left-tree (car left-result))
              (none-left-elts (cdr left-result))
              (right-size (- n (+ left-size 1))))
          (let ((this-entry (car none-left-elts))
                (right-result (partial-tree (cdr none-left-elts) right-size)))
            (let ((right-tree (car right-result))
                  (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree) remaining-elts)
            )
          )
        )
      )
    )
  )
)

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define l1 (list 1 3 5 7 9 11))
(list->tree l1)
